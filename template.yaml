AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: User-Service-Deployment-Descriptor

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    AutoPublishAlias: !Ref Stage
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker
    CodeUri: ./application
    Tags:
      Stage: !Ref Stage
      Service: LmsUser
      Resource: Lambda
    Environment:
      Variables:
        TABLE: !Ref LmsUserTable
        APPLICATION_ENVIRONMENT: !Ref Stage
        CLOUD_REGION: us-east-1
        MAIN_CLASS: com.tekcapzule.lms.user.application.UserApplication
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        COURSE_SERVICE_URL: https://lkyrfc5qhl.execute-api.us-east-1.amazonaws.com/dev/lmscourse/get

Resources:

  # Setup API Gateway

  LmsUserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "lmsuser-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  # Setup DynamoDB Table

  LmsUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}LmsUser"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

      GlobalSecondaryIndexes:
        - IndexName: courseGSI
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # Setup Lambda Functions

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LmsUser-CreateUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LmsUserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createUserFunction

      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lms/user/create
            Method: post
            RestApiId:
              Ref: LmsUserApi

#  UpdateUserFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-LmsUser-UpdateUser"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: updateUserFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/update
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
#
  UpdateUserProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LmsUser-UpdateUserProgress"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LmsUserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateProgressFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lms/user/updateProgress
            Method: post
            RestApiId:
              Ref: LmsUserApi

  UpdateActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LmsUser-UpdateActivityFunction"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LmsUserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateActivityFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lms/user/updateActivity
            Method: post
            RestApiId:
              Ref: LmsUserApi
#  DisableUserFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-LmsUser-DisableUser"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: disableUserFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/disable
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LmsUser-GetUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LmsUserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getUserFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lms/user/get
            Method: post
            RestApiId:
              Ref: LmsUserApi

#  SubscribeCourseFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-LmsUser-SubscribeCourseUser"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: subscribeCourseFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/subscribe
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
#
#  UnsubscribeCourseFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-LmsUser-UnsubscribeUser"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: unsubscribeCourseFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/unsubscribe
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
  OptInCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LmsUser-OptInCourseUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LmsUserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: optInCourseFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lms/user/optin
            Method: post
            RestApiId:
              Ref: LmsUserApi

#  OptOutCourseFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-Lms-User-optOutCourseUser"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: optOutCourseFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/optout
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
#
#  GetUserCountFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-Lms-User-GetUsersCount"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: getUserCountFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/getCount
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
#
#  GetCourseByStatusFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub "${Stage}-Lms-User-GetCourseByStatusFunction"
#      SnapStart:
#        ApplyOn: PublishedVersions
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref LmsUserTable
#      Environment:
#        Variables:
#          SPRING_CLOUD_FUNCTION_DEFINITION: getCourseByStatusFunction
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            Path: lms/user/getCourseByStatus
#            Method: post
#            RestApiId:
#              Ref: LmsUserApi
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - GetUserFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserFunction
      Principal: apigateway.amazonaws.com

  # Set Output Variable

Outputs:
  ApiEndpoint:
    Description: "LMS User API endpoint."
    Value: !Sub "https://${LmsUserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/lms/user"